pipeline {
    agent any
    tools {
        maven "maven-3.9.7"
    }
    environment {
        CHANGED = false
    }
    stages {
        stage('Check for Changes') {
            steps {
                script {
                    // Check if there are any changes in the specified folder
                    def changes = bat(script: 'git diff --name-only HEAD~1 HEAD', returnStdout: true).trim()
                    if (changes.contains("LaboMicroServices/Service-Laboratoire/")) {
                        echo "Changes detected in LaboMicroServices/Service-Laboratoire. Continuing with the build."
                        env.CHANGED = true
                    } else {
                        echo "No changes detected in LaboMicroServices/Service-Laboratoire. Marking build as successful without further action."
                        currentBuild.result = 'SUCCESS'
                    }
                }
            }
        }

        stage('Checkout Code') {
            when {
                expression { env.CHANGED == 'true' }
            }
            steps {
                bat 'git pull origin master'
            }
        }

        stage('Build and Test Laboratoire Service') {
            when {
                expression { env.CHANGED == 'true' }
            }
            steps {
                dir('LaboMicroServices/Service-Laboratoire') {
                    // Run Maven build and tests
                    bat 'mvn clean install -DskipTests=false'
                }
            }
        }

        stage('Build Docker Image') {
            when {
                expression { env.CHANGED == 'true' }
            }
            steps {
                dir('LaboMicroServices/Service-Laboratoire') {
                    // Build the Docker image
                    bat 'docker build -t artistefx/service-laboratoire:latest .'
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            when {
                expression { env.CHANGED == 'true' }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-artistefx', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                    script {
                        bat 'docker login -u %DOCKERHUB_USERNAME% -p %DOCKERHUB_PASSWORD%'
                        bat "docker push artistefx/service-laboratoire:latest"
                    }
                }
            }
        }

        stage('Deploy to Minikube') {
            when {
                expression { env.CHANGED == 'true' }
            }
            steps {
                script {
                    env.KUBECONFIG = 'C:\\Users\\HP\\.kube\\config' // Adjust this path as needed
                    bat 'kubectl apply -f k8s/Service-Laboratoire-Deployment.yaml'
                }
            }
        }
    }
    post {
        success {
            script {
                if (!env.CHANGED) {
                    echo 'No changes to build. Job marked as successful without build steps.'
                }
            }
        }
    }
}
